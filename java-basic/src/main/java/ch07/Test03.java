//클래스 사용전2-왜 클래스를 정의하는가
package ch07;

public class Test03 {
  //학생의 성적 데이터를 담을 새로운 구조의 메모리를 정의한다.
  //문법:
  //   class 새데이터타입이름 {
  //새 데이터타입이름: 대분자로 시작하고, 단어의 시작도 대문자로 작성한다. 보통 명사형으로 짓는다.
  
  static class Score {//사용자 정의 데이터 타입   //설계 도면이기 때문에 변수가 존재하는 상태가 아니다.
    String name; 
    int kor;
    int eng;
    int math;
    int sum;
    float aver;
  }
  public static void main(String[] args) {
    //설계 도면 대로 변수를 준비한다.
    //즉, 새 데이터 타입에 따라 변수를 준비한다.
    //클래스에 정의된 대로 변수를 준비한다.=>클래스의 인스턴스를 생성한다.
    // 문법
    //   new 클래스명();
    //클래스 설계도에 따라 준비한 변수를 사용하려면 그 메모리의 주소가 있어야 한다.
    //클래스의 인스턴스 주소를 저장할 변수를 생성하는 문법:
    //클래스명 변수명;
    //예) 
    
    Score s1;//클래스의 인스턴스 주소를 저장할 변수
    //s1에 저장되는 주소는 Score클래스에서 사용자가 정의해놓은 데이터타입(String name, int kor, int eng, int math, int sum, float aver)이 저장된다.
    //score설계도에 따라 준비한 메모리(변수들)의 주소를 저장하는 변수
    //이렇게 주소를 저항하는 변수를 레퍼란스 라고 부른다.
    s1=new Score(); //score 설계도에 따라 메모리(변수)를 준비시킨다.
                       //그리고 그 메모리의 주소를 레퍼런스(변수)s1에 저장한다.
                        //new를 사용해서 메모리를 생성한다.(인스턴스)
    
    //물론 이를 한줄로 표현할 수도 있다.
    Score s2=new Score();
    
    Score s3=new Score();
    
    //새 데이터 타입에 따라 만든 메모리=>score 클래스의 인스턴스에 값 넣기
    //문법
    //레퍼런스.변수명=값;
    //인스턴스에 값 넣기
    s1.name="홍길동";
    s1.kor=100;
    s1.eng=100;
    s1.math=100;
    
    
    s2.name="임꺽정";
    s2.kor=90;
    s2.eng=90;
    s2.math=90;
    
    s3.name="유관순";
    s3.kor=70;
    s3.kor=80;
    s3.eng=100;
    
    printScore(s1);
    //메서드에 새 데이터 타입으로 만든 메모리의 주소를 전달한다.
    //값이 아니라 메모리의 주소를 전달한다(call by reference)
    printScore(s2);
    
    printScore(s3); //이전 예제 처럼 여러 개의 값을 넘겨줄 필요가 없다. 아주 편리한다.
 
    }
  
  
  //새 데이터 타입의 메모리 주소를 받을 변수를 파라미터로 선언한다.  
  static void printScore(Score s) {//s: s1,s2에서 넘어오는 값을 통칭해서 printScore라는 메서드에서 s라는 이름으로 사용하겠다는 의ㅣ
    s.sum = s.kor + s.eng + s.math;
    s.aver = s.sum / 3f;
    System.out.printf("%s, %d, %d, %d, %d, %f\n",s.name, s.kor, s.eng,s.math, s.sum, s.aver );
    
    
  }

  }




/**
 * 
 * 클래스 문법의 활용
 * 1. 사용자 정의 데이터 타입과 그 타입의 값을 다루는 연산자를 정의할 때 사용한다.(새로운 데이터타입)
 * 2. 서로 관련된 일을 하는 메서드를 분류하여 묶는 용도로 사용한다.
 * 클래스:메소드를 분류해서 관련있는 기능별로 묶어놓는다.
 * class Calculator에서 Calculator가 클래스의 분류명이다.
 * 객체지향:소스코드를 좀더 조직적으로 관리하자
 * 리펙토링:클래스를 다시 재구성한다.(클래스를 다시 재분류해야할때)
 * 
 * 
 * 자바 기본 데이터 타입의 변수 선언 vs 클래스의 변수 선언
 * 자바 기본 데이터 타입은 변수르르 선언하는 순간 메모리에 생성된다.
 * int a; //바로 int 값을 저장할 메모리가 준비된다.
 * 클래스의  변수선언은 주소를 담는 레퍼런스이다. 
 * 따라서 주소를 담는 메모리만 준비된다.
 * Score s; //아직  Score 설계도에 따라 변수들이 준비된 상태가 아니다.
 * 클래스의 설계도에 따라 메모리를 준비하려면 따로 NEW 명령을 사용해야 한다.
 * new Score();
 * 생성된 메모리를 사용하려면 주소를 잘 보관해 두어야 ㅎ나다.
 * s=new Score(); 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * */
