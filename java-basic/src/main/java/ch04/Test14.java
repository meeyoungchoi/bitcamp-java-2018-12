// 비트이동연산자: >> , >>>, <<
//1비트 이동할때마다 값이 절반으로(2로) 나뉘어진다.
//n애 대해 x비트를 오른쪼긍로 이동=n/2**x
//나누기 연산을 수행하는 것 보다 계산 속도가 빠르다.


package ch04;

public class Test14 {

  public static void main(String[] args) {
   // >> : 오른쪽으로 비트를 이동시킨다.
    //왼쪽 빈자리는 부호비트로 채운다.
    
    int a=0xca; //66
    System.out.println(Integer.toHexString(a >>4)); //0xc=12
    System.out.println(a >> 4);
    //000000000_00000000_00000000_11001010
    //    0000_000000000_00000000_00001100|1010
    //왼쪽빈자리는 부호비트로 채운다./ |뒤에는 날라간다.
    //0000
                     
    System.out.println(Integer.toHexString(a >> 3));//0x19=25
    System.out.println(a >> 3);
    //000000000_00000000_00000000_11001010
   //    000000_00000000_00000000_00011001|010
   //000000000_00000000_00000000_00011001
    
    
    System.out.println(Integer.toHexString(a >> 2)); //0x32=50
    System.out.println(a >> 2);
    //000000000_00000000_00000000_11001010
   //   000000_00000000_00000000_000110010|10
   //
    
    System.out.println(Integer.toHexString(a >> 1));//0x65
    System.out.println(a >> 1);
     //000000000_00000000_00000000_11001010
    //  000000_00000000_00000000_0001100101|0
    //
    
    //음수의 이동
    //음수값에 대해 오른쪽으로 비트 이동
    //2**n으로 나눈것과 같다.
    //소수점 이하를 반올림한 결과가 나온다.
    //왼쪽 빈자리가 부호비트로 채워진다. // 11111111_11111111_11111111_00110110
    a=-202; // 11111111_11111111_11111111_00110110=0xff_ff_ff_36
    System.out.println(a >> 1);
      //  // 111111111_11111111_11111110_011011|0 <==넘어가는 값은 버린다.
    //빈자리는 부호비트로 채운다.
    //0xff_ff_ff_9b
    
    System.out.println(a >> 2);//-202/ 2**2 =-51
    System.out.println(a >> 3);//-202 /2**3 =-26
    System.out.println(a >> 4);//-202 / 2**4 =-13
    
  }

}


/***
 
 *
 * 
 * 
 * *
 */



