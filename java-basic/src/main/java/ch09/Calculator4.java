package ch09;


public class Calculator4 {
  

  int result = 0; 
  
 // 인스턴스 주소를 파라미터로 받지 않고 호출될 때 앞에서 받는 방법
  void plus ( int a) {
  //메서드를 호출할 때 인스턴스 주소를 앞으로 넘겼다.
    //예 c1.plus
    //그럼 c1에 들어 있던 주소가 plus에 전달되었다는 것인데
    //그 주소는 어디에 있는가? 알아야지 인스턴스를 쓰든 안쓰든 할 것 아닌가?
    //=>static 이 붙지 않은 메서드를 인스턴스 메서드라 부른다.
    //=>모든 인스턴스 메서드는 호출 될 때 넘겨 받은 인스턴스 주소를 저장하기 위한 
    //변수를 내장 하고 있다.
    //=>내장된 변수가 있다고? 그럼 변수의 이름은? this이다.
    //파리미터 that에 들어 있는 주소로 찾아가서 그 인스턴스의 result 필드를 사용한다.
    //스태틱 메서드(클래스 메서드)에는 this변수가 없다.
    //스태틱 메서드는 this 변수를 내장하고 있지 않으므로 컴파일 오류
   this.result += a;
    //that.ok += a;
  }
 
  void minus ( int a) {
    //result -= a;
    result -= a;
  }
  
  void divide( int a) {
    //result /=  a;
    this.result /= a;
  }
  
  
  void multiple( int a) {
    //this를 생략할수 있다.
    //생략하면 컴파일 할때 this가 자동으로 붙는다.
    //this:내장변수(jvm컴파일러가 메서드를 호출할 때 )
    this.result *= a;//that이라는 변수에
  }
  
}
  //클래스를 정의하면서 만든 기능을 간단하게 테스트 할 때
  //다음과 같이 해당 클래스에 main() 메서드를 만들어
  //테스트 해 볼 수 있다.
  //
  
  


/*
 * 클래스 문법의 용도
 * 1. 새 데이터 타입을 정의할 때
 * 2. 관련 메서드를 분류할 때
 * 클래스 문법은 유지보수 하기 쉽도록 관련 기능들을 묶어서 분류할때 사용할수 있다.
 * 
 * 
 */
